{"ast":null,"code":"import _slicedToArray from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/austin/Desktop/bbgo/frontend/components/TradingVolumeBar.js\",\n    _s = $RefreshSig$();\n\nimport { ResponsiveBar } from '@nivo/bar';\nimport { queryTradingVolume } from '../api/bbgo';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction toPeriodDateString(time, period) {\n  switch (period) {\n    case \"day\":\n      return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate();\n\n    case \"month\":\n      return time.getFullYear() + \"-\" + (time.getMonth() + 1);\n\n    case \"year\":\n      return time.getFullYear();\n  }\n\n  return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate();\n}\n\nfunction groupData(rows, period, segment) {\n  var dateIndex = {};\n  var startTime = null;\n  var endTime = null;\n  var keys = {};\n  rows.forEach(function (v) {\n    var time = new Date(v.time);\n\n    if (!startTime) {\n      startTime = time;\n    }\n\n    endTime = time;\n    var dateStr = toPeriodDateString(time, period);\n    var key = v[segment];\n    keys[key] = true;\n    var k = key ? key : \"total\";\n    var quoteVolume = Math.round(v.quoteVolume * 100) / 100;\n\n    if (dateIndex[dateStr]) {\n      dateIndex[dateStr][k] = quoteVolume;\n    } else {\n      dateIndex[dateStr] = _defineProperty({\n        date: dateStr,\n        year: time.getFullYear(),\n        month: time.getMonth() + 1,\n        day: time.getDate()\n      }, k, quoteVolume);\n    }\n  });\n  var data = [];\n\n  while (startTime < endTime) {\n    var dateStr = toPeriodDateString(startTime, period);\n    var _groupData = dateIndex[dateStr];\n\n    if (_groupData) {\n      data.push(_groupData);\n    } else {\n      data.push({\n        date: dateStr,\n        year: startTime.getFullYear(),\n        month: startTime.getMonth() + 1,\n        day: startTime.getDate(),\n        total: 0\n      });\n    }\n\n    switch (period) {\n      case \"day\":\n        startTime.setDate(startTime.getDate() + 1);\n        break;\n\n      case \"month\":\n        startTime.setMonth(startTime.getMonth() + 1);\n        break;\n\n      case \"year\":\n        startTime.setFullYear(startTime.getFullYear() + 1);\n        break;\n    }\n  }\n\n  return [data, Object.keys(keys)];\n}\n\nexport default function TradingVolumeBar(props) {\n  _s();\n\n  var _useState = useState([]),\n      tradingVolumes = _useState[0],\n      setTradingVolumes = _useState[1];\n\n  var _useState2 = useState(props.period),\n      period = _useState2[0],\n      setPeriod = _useState2[1];\n\n  var _useState3 = useState(props.segment),\n      segment = _useState3[0],\n      setSegment = _useState3[1];\n\n  useEffect(function () {\n    if (props.period !== period) {\n      setPeriod(props.period);\n    }\n\n    if (props.segment !== segment) {\n      setSegment(props.segment);\n    }\n\n    queryTradingVolume({\n      period: props.period,\n      segment: props.segment\n    }, function (tradingVolumes) {\n      setTradingVolumes(tradingVolumes);\n    });\n  }, [props.period, props.segment]);\n\n  var _groupData2 = groupData(tradingVolumes, period, segment),\n      _groupData3 = _slicedToArray(_groupData2, 2),\n      data = _groupData3[0],\n      keys = _groupData3[1];\n\n  return /*#__PURE__*/_jsxDEV(ResponsiveBar, {\n    keys: keys,\n    data: data,\n    indexBy: \"date\",\n    margin: {\n      top: 50,\n      right: 160,\n      bottom: 100,\n      left: 60\n    },\n    padding: 0.3,\n    valueScale: {\n      type: 'linear'\n    },\n    indexScale: {\n      type: 'band',\n      round: true\n    },\n    labelSkipWidth: 30,\n    labelSkipHeight: 20,\n    enableGridY: true,\n    colors: {\n      scheme: 'paired'\n    },\n    axisBottom: {\n      tickRotation: -90,\n      legend: period,\n      legendPosition: 'middle',\n      legendOffset: 80\n    },\n    legends: [{\n      dataFrom: 'keys',\n      anchor: 'right',\n      direction: 'column',\n      justify: false,\n      translateX: 120,\n      translateY: 0,\n      itemsSpacing: 2,\n      itemWidth: 100,\n      itemHeight: 20,\n      itemDirection: 'left-to-right',\n      itemOpacity: 0.85,\n      symbolSize: 20,\n      effects: [{\n        on: 'hover',\n        style: {\n          itemOpacity: 1\n        }\n      }]\n    }],\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 12\n  }, this);\n}\n\n_s(TradingVolumeBar, \"la50Me3KNKCs24gkXtmlBidyJag=\");\n\n_c = TradingVolumeBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"TradingVolumeBar\");","map":{"version":3,"sources":["/Users/austin/Desktop/bbgo/frontend/components/TradingVolumeBar.js"],"names":["ResponsiveBar","queryTradingVolume","useEffect","useState","toPeriodDateString","time","period","getFullYear","getMonth","getDate","groupData","rows","segment","dateIndex","startTime","endTime","keys","forEach","v","Date","dateStr","key","k","quoteVolume","Math","round","date","year","month","day","data","push","total","setDate","setMonth","setFullYear","Object","TradingVolumeBar","props","tradingVolumes","setTradingVolumes","setPeriod","setSegment","top","right","bottom","left","type","scheme","tickRotation","legend","legendPosition","legendOffset","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style"],"mappings":";;;;;;AAAA,SAAQA,aAAR,QAA4B,WAA5B;AACA,SAAQC,kBAAR,QAAiC,aAAjC;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;;AAEA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,MAAlC,EAA0C;AACtC,UAAQA,MAAR;AACI,SAAK,KAAL;AACI,aAAOD,IAAI,CAACE,WAAL,KAAqB,GAArB,IAA4BF,IAAI,CAACG,QAAL,KAAkB,CAA9C,IAAmD,GAAnD,GAAyDH,IAAI,CAACI,OAAL,EAAhE;;AACJ,SAAK,OAAL;AACI,aAAOJ,IAAI,CAACE,WAAL,KAAqB,GAArB,IAA4BF,IAAI,CAACG,QAAL,KAAkB,CAA9C,CAAP;;AACJ,SAAK,MAAL;AACI,aAAOH,IAAI,CAACE,WAAL,EAAP;AANR;;AAUA,SAAOF,IAAI,CAACE,WAAL,KAAqB,GAArB,IAA4BF,IAAI,CAACG,QAAL,KAAkB,CAA9C,IAAmD,GAAnD,GAAyDH,IAAI,CAACI,OAAL,EAAhE;AACH;;AAED,SAASC,SAAT,CAAmBC,IAAnB,EAAyBL,MAAzB,EAAiCM,OAAjC,EAA0C;AACtC,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,IAAI,GAAG,EAAX;AAEAL,EAAAA,IAAI,CAACM,OAAL,CAAa,UAACC,CAAD,EAAO;AAChB,QAAMb,IAAI,GAAG,IAAIc,IAAJ,CAASD,CAAC,CAACb,IAAX,CAAb;;AACA,QAAI,CAACS,SAAL,EAAgB;AACZA,MAAAA,SAAS,GAAGT,IAAZ;AACH;;AAEDU,IAAAA,OAAO,GAAGV,IAAV;AAEA,QAAMe,OAAO,GAAGhB,kBAAkB,CAACC,IAAD,EAAOC,MAAP,CAAlC;AACA,QAAMe,GAAG,GAAGH,CAAC,CAACN,OAAD,CAAb;AAEAI,IAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,IAAZ;AAEA,QAAMC,CAAC,GAAGD,GAAG,GAAGA,GAAH,GAAS,OAAtB;AACA,QAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWP,CAAC,CAACK,WAAF,GAAgB,GAA3B,IAAkC,GAAtD;;AAEA,QAAIV,SAAS,CAACO,OAAD,CAAb,EAAwB;AACpBP,MAAAA,SAAS,CAACO,OAAD,CAAT,CAAmBE,CAAnB,IAAwBC,WAAxB;AACH,KAFD,MAEO;AACHV,MAAAA,SAAS,CAACO,OAAD,CAAT;AACIM,QAAAA,IAAI,EAAEN,OADV;AAEIO,QAAAA,IAAI,EAAEtB,IAAI,CAACE,WAAL,EAFV;AAGIqB,QAAAA,KAAK,EAAEvB,IAAI,CAACG,QAAL,KAAkB,CAH7B;AAIIqB,QAAAA,GAAG,EAAExB,IAAI,CAACI,OAAL;AAJT,SAKKa,CALL,EAKSC,WALT;AAOH;AACJ,GA3BD;AA6BA,MAAIO,IAAI,GAAG,EAAX;;AACA,SAAOhB,SAAS,GAAGC,OAAnB,EAA4B;AACxB,QAAMK,OAAO,GAAGhB,kBAAkB,CAACU,SAAD,EAAYR,MAAZ,CAAlC;AACA,QAAMI,UAAS,GAAGG,SAAS,CAACO,OAAD,CAA3B;;AACA,QAAIV,UAAJ,EAAe;AACXoB,MAAAA,IAAI,CAACC,IAAL,CAAUrB,UAAV;AACH,KAFD,MAEO;AACHoB,MAAAA,IAAI,CAACC,IAAL,CAAU;AACNL,QAAAA,IAAI,EAAEN,OADA;AAENO,QAAAA,IAAI,EAAEb,SAAS,CAACP,WAAV,EAFA;AAGNqB,QAAAA,KAAK,EAAEd,SAAS,CAACN,QAAV,KAAuB,CAHxB;AAINqB,QAAAA,GAAG,EAAEf,SAAS,CAACL,OAAV,EAJC;AAKNuB,QAAAA,KAAK,EAAE;AALD,OAAV;AAOH;;AAED,YAAQ1B,MAAR;AACI,WAAK,KAAL;AACIQ,QAAAA,SAAS,CAACmB,OAAV,CAAkBnB,SAAS,CAACL,OAAV,KAAsB,CAAxC;AACA;;AACJ,WAAK,OAAL;AACIK,QAAAA,SAAS,CAACoB,QAAV,CAAmBpB,SAAS,CAACN,QAAV,KAAuB,CAA1C;AACA;;AACJ,WAAK,MAAL;AACIM,QAAAA,SAAS,CAACqB,WAAV,CAAsBrB,SAAS,CAACP,WAAV,KAA0B,CAAhD;AACA;AATR;AAWH;;AAED,SAAO,CAACuB,IAAD,EAAOM,MAAM,CAACpB,IAAP,CAAYA,IAAZ,CAAP,CAAP;AACH;;AAED,eAAe,SAASqB,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC5C,kBAA4CnC,QAAQ,CAAC,EAAD,CAApD;AAAA,MAAOoC,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAA4BrC,QAAQ,CAACmC,KAAK,CAAChC,MAAP,CAApC;AAAA,MAAOA,MAAP;AAAA,MAAemC,SAAf;;AACA,mBAA8BtC,QAAQ,CAACmC,KAAK,CAAC1B,OAAP,CAAtC;AAAA,MAAOA,OAAP;AAAA,MAAgB8B,UAAhB;;AAEAxC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIoC,KAAK,CAAChC,MAAN,KAAiBA,MAArB,EAA6B;AACzBmC,MAAAA,SAAS,CAACH,KAAK,CAAChC,MAAP,CAAT;AACH;;AAED,QAAIgC,KAAK,CAAC1B,OAAN,KAAkBA,OAAtB,EAA+B;AAC3B8B,MAAAA,UAAU,CAACJ,KAAK,CAAC1B,OAAP,CAAV;AACH;;AAEDX,IAAAA,kBAAkB,CAAC;AAACK,MAAAA,MAAM,EAAEgC,KAAK,CAAChC,MAAf;AAAuBM,MAAAA,OAAO,EAAE0B,KAAK,CAAC1B;AAAtC,KAAD,EAAkD,UAAC2B,cAAD,EAAoB;AACpFC,MAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACH,KAFiB,CAAlB;AAGH,GAZQ,EAYN,CAACD,KAAK,CAAChC,MAAP,EAAegC,KAAK,CAAC1B,OAArB,CAZM,CAAT;;AAcA,oBAAqBF,SAAS,CAAC6B,cAAD,EAAiBjC,MAAjB,EAAyBM,OAAzB,CAA9B;AAAA;AAAA,MAAOkB,IAAP;AAAA,MAAad,IAAb;;AAEA,sBAAO,QAAC,aAAD;AAAe,IAAA,IAAI,EAAEA,IAArB;AACe,IAAA,IAAI,EAAEc,IADrB;AAEe,IAAA,OAAO,EAAE,MAFxB;AAGe,IAAA,MAAM,EAAE;AAACa,MAAAA,GAAG,EAAE,EAAN;AAAUC,MAAAA,KAAK,EAAE,GAAjB;AAAsBC,MAAAA,MAAM,EAAE,GAA9B;AAAmCC,MAAAA,IAAI,EAAE;AAAzC,KAHvB;AAIe,IAAA,OAAO,EAAE,GAJxB;AAKe,IAAA,UAAU,EAAE;AAACC,MAAAA,IAAI,EAAE;AAAP,KAL3B;AAMe,IAAA,UAAU,EAAE;AAACA,MAAAA,IAAI,EAAE,MAAP;AAAetB,MAAAA,KAAK,EAAE;AAAtB,KAN3B;AAOe,IAAA,cAAc,EAAE,EAP/B;AAQe,IAAA,eAAe,EAAE,EARhC;AASe,IAAA,WAAW,EAAE,IAT5B;AAUe,IAAA,MAAM,EAAE;AAACuB,MAAAA,MAAM,EAAE;AAAT,KAVvB;AAWe,IAAA,UAAU,EAAE;AACRC,MAAAA,YAAY,EAAE,CAAC,EADP;AAERC,MAAAA,MAAM,EAAE5C,MAFA;AAGR6C,MAAAA,cAAc,EAAE,QAHR;AAIRC,MAAAA,YAAY,EAAE;AAJN,KAX3B;AAiBe,IAAA,OAAO,EAAE,CACL;AACIC,MAAAA,QAAQ,EAAE,MADd;AAEIC,MAAAA,MAAM,EAAE,OAFZ;AAGIC,MAAAA,SAAS,EAAE,QAHf;AAIIC,MAAAA,OAAO,EAAE,KAJb;AAKIC,MAAAA,UAAU,EAAE,GALhB;AAMIC,MAAAA,UAAU,EAAE,CANhB;AAOIC,MAAAA,YAAY,EAAE,CAPlB;AAQIC,MAAAA,SAAS,EAAE,GARf;AASIC,MAAAA,UAAU,EAAE,EAThB;AAUIC,MAAAA,aAAa,EAAE,eAVnB;AAWIC,MAAAA,WAAW,EAAE,IAXjB;AAYIC,MAAAA,UAAU,EAAE,EAZhB;AAaIC,MAAAA,OAAO,EAAE,CACL;AACIC,QAAAA,EAAE,EAAE,OADR;AAEIC,QAAAA,KAAK,EAAE;AACHJ,UAAAA,WAAW,EAAE;AADV;AAFX,OADK;AAbb,KADK,CAjBxB;AAyCe,IAAA,OAAO,EAAE,IAzCxB;AA0Ce,IAAA,eAAe,EAAE,EA1ChC;AA2Ce,IAAA,aAAa,EAAE;AA3C9B;AAAA;AAAA;AAAA;AAAA,UAAP;AA6CH;;GAlEuB1B,gB;;KAAAA,gB","sourcesContent":["import {ResponsiveBar} from '@nivo/bar';\nimport {queryTradingVolume} from '../api/bbgo';\nimport {useEffect, useState} from \"react\";\n\nfunction toPeriodDateString(time, period) {\n    switch (period) {\n        case \"day\":\n            return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate()\n        case \"month\":\n            return time.getFullYear() + \"-\" + (time.getMonth() + 1)\n        case \"year\":\n            return time.getFullYear()\n\n    }\n\n    return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate()\n}\n\nfunction groupData(rows, period, segment) {\n    let dateIndex = {}\n    let startTime = null\n    let endTime = null\n    let keys = {}\n\n    rows.forEach((v) => {\n        const time = new Date(v.time)\n        if (!startTime) {\n            startTime = time\n        }\n\n        endTime = time\n\n        const dateStr = toPeriodDateString(time, period)\n        const key = v[segment]\n\n        keys[key] = true\n\n        const k = key ? key : \"total\"\n        const quoteVolume = Math.round(v.quoteVolume * 100) / 100\n\n        if (dateIndex[dateStr]) {\n            dateIndex[dateStr][k] = quoteVolume\n        } else {\n            dateIndex[dateStr] = {\n                date: dateStr,\n                year: time.getFullYear(),\n                month: time.getMonth() + 1,\n                day: time.getDate(),\n                [k]: quoteVolume,\n            }\n        }\n    })\n\n    let data = []\n    while (startTime < endTime) {\n        const dateStr = toPeriodDateString(startTime, period)\n        const groupData = dateIndex[dateStr]\n        if (groupData) {\n            data.push(groupData)\n        } else {\n            data.push({\n                date: dateStr,\n                year: startTime.getFullYear(),\n                month: startTime.getMonth() + 1,\n                day: startTime.getDate(),\n                total: 0,\n            })\n        }\n\n        switch (period) {\n            case \"day\":\n                startTime.setDate(startTime.getDate() + 1)\n                break\n            case \"month\":\n                startTime.setMonth(startTime.getMonth() + 1)\n                break\n            case \"year\":\n                startTime.setFullYear(startTime.getFullYear() + 1)\n                break\n        }\n    }\n\n    return [data, Object.keys(keys)]\n}\n\nexport default function TradingVolumeBar(props) {\n    const [tradingVolumes, setTradingVolumes] = useState([])\n    const [period, setPeriod] = useState(props.period)\n    const [segment, setSegment] = useState(props.segment)\n\n    useEffect(() => {\n        if (props.period !== period) {\n            setPeriod(props.period);\n        }\n\n        if (props.segment !== segment) {\n            setSegment(props.segment);\n        }\n\n        queryTradingVolume({period: props.period, segment: props.segment }, (tradingVolumes) => {\n            setTradingVolumes(tradingVolumes)\n        })\n    }, [props.period, props.segment])\n\n    const [data, keys] = groupData(tradingVolumes, period, segment)\n\n    return <ResponsiveBar keys={keys}\n                          data={data}\n                          indexBy={\"date\"}\n                          margin={{top: 50, right: 160, bottom: 100, left: 60}}\n                          padding={0.3}\n                          valueScale={{type: 'linear'}}\n                          indexScale={{type: 'band', round: true}}\n                          labelSkipWidth={30}\n                          labelSkipHeight={20}\n                          enableGridY={true}\n                          colors={{scheme: 'paired'}}\n                          axisBottom={{\n                              tickRotation: -90,\n                              legend: period,\n                              legendPosition: 'middle',\n                              legendOffset: 80\n                          }}\n                          legends={[\n                              {\n                                  dataFrom: 'keys',\n                                  anchor: 'right',\n                                  direction: 'column',\n                                  justify: false,\n                                  translateX: 120,\n                                  translateY: 0,\n                                  itemsSpacing: 2,\n                                  itemWidth: 100,\n                                  itemHeight: 20,\n                                  itemDirection: 'left-to-right',\n                                  itemOpacity: 0.85,\n                                  symbolSize: 20,\n                                  effects: [\n                                      {\n                                          on: 'hover',\n                                          style: {\n                                              itemOpacity: 1\n                                          }\n                                      }\n                                  ]\n                              }\n                          ]}\n                          animate={true}\n                          motionStiffness={90}\n                          motionDamping={15}\n    />;\n}\n"]},"metadata":{},"sourceType":"module"}