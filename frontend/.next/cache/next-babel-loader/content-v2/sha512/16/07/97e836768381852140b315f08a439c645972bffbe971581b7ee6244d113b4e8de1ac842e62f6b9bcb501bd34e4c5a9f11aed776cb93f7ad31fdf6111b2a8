{"ast":null,"code":"import { ResponsiveBar } from '@nivo/bar';\nimport { queryTradingVolume } from '../api/bbgo';\nimport { useEffect, useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction toPeriodDateString(time, period) {\n  switch (period) {\n    case \"day\":\n      return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate();\n\n    case \"month\":\n      return time.getFullYear() + \"-\" + (time.getMonth() + 1);\n\n    case \"year\":\n      return time.getFullYear();\n  }\n\n  return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate();\n}\n\nfunction groupData(rows, period, segment) {\n  let dateIndex = {};\n  let startTime = null;\n  let endTime = null;\n  let keys = {};\n  rows.forEach(v => {\n    const time = new Date(v.time);\n\n    if (!startTime) {\n      startTime = time;\n    }\n\n    endTime = time;\n    const dateStr = toPeriodDateString(time, period);\n    const key = v[segment];\n    keys[key] = true;\n    const k = key ? key : \"total\";\n    const quoteVolume = Math.round(v.quoteVolume * 100) / 100;\n\n    if (dateIndex[dateStr]) {\n      dateIndex[dateStr][k] = quoteVolume;\n    } else {\n      dateIndex[dateStr] = {\n        date: dateStr,\n        year: time.getFullYear(),\n        month: time.getMonth() + 1,\n        day: time.getDate(),\n        [k]: quoteVolume\n      };\n    }\n  });\n  let data = [];\n\n  while (startTime < endTime) {\n    const dateStr = toPeriodDateString(startTime, period);\n    const groupData = dateIndex[dateStr];\n\n    if (groupData) {\n      data.push(groupData);\n    } else {\n      data.push({\n        date: dateStr,\n        year: startTime.getFullYear(),\n        month: startTime.getMonth() + 1,\n        day: startTime.getDate(),\n        total: 0\n      });\n    }\n\n    switch (period) {\n      case \"day\":\n        startTime.setDate(startTime.getDate() + 1);\n        break;\n\n      case \"month\":\n        startTime.setMonth(startTime.getMonth() + 1);\n        break;\n\n      case \"year\":\n        startTime.setFullYear(startTime.getFullYear() + 1);\n        break;\n    }\n  }\n\n  return [data, Object.keys(keys)];\n}\n\nexport default function TradingVolumeBar(props) {\n  const {\n    0: tradingVolumes,\n    1: setTradingVolumes\n  } = useState([]);\n  const {\n    0: period,\n    1: setPeriod\n  } = useState(props.period);\n  const {\n    0: segment,\n    1: setSegment\n  } = useState(props.segment);\n  useEffect(() => {\n    if (props.period !== period) {\n      setPeriod(props.period);\n    }\n\n    if (props.segment !== segment) {\n      setSegment(props.segment);\n    }\n\n    queryTradingVolume({\n      period: props.period,\n      segment: props.segment\n    }, tradingVolumes => {\n      setTradingVolumes(tradingVolumes);\n    });\n  }, [props.period, props.segment]);\n  const [data, keys] = groupData(tradingVolumes, period, segment);\n  return /*#__PURE__*/_jsx(ResponsiveBar, {\n    keys: keys,\n    data: data,\n    indexBy: \"date\",\n    margin: {\n      top: 50,\n      right: 160,\n      bottom: 100,\n      left: 60\n    },\n    padding: 0.3,\n    valueScale: {\n      type: 'linear'\n    },\n    indexScale: {\n      type: 'band',\n      round: true\n    },\n    labelSkipWidth: 30,\n    labelSkipHeight: 20,\n    enableGridY: true,\n    colors: {\n      scheme: 'paired'\n    },\n    axisBottom: {\n      tickRotation: -90,\n      legend: period,\n      legendPosition: 'middle',\n      legendOffset: 80\n    },\n    legends: [{\n      dataFrom: 'keys',\n      anchor: 'right',\n      direction: 'column',\n      justify: false,\n      translateX: 120,\n      translateY: 0,\n      itemsSpacing: 2,\n      itemWidth: 100,\n      itemHeight: 20,\n      itemDirection: 'left-to-right',\n      itemOpacity: 0.85,\n      symbolSize: 20,\n      effects: [{\n        on: 'hover',\n        style: {\n          itemOpacity: 1\n        }\n      }]\n    }],\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15\n  });\n}","map":null,"metadata":{},"sourceType":"module"}