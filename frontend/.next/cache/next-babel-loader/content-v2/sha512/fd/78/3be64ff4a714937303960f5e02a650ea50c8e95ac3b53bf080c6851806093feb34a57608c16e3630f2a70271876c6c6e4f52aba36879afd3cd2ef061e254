{"ast":null,"code":"import _defineProperty from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from '../src/theme';\nimport '../styles/globals.css';\nimport { querySessions, querySyncStatus } from \"../api/bbgo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SyncNotStarted = 0;\nvar Syncing = 1;\nvar SyncDone = 2; // session is configured, check if we're syncing data\n\nvar syncStatusPoller = null;\nexport default function MyApp(props) {\n  var Component = props.Component,\n      pageProps = props.pageProps;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      syncing = _React$useState4[0],\n      setSyncing = _React$useState4[1];\n\n  React.useEffect(function () {\n    // Remove the server-side injected CSS.\n    var jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n\n    querySessions(function (sessions) {\n      if (sessions.length > 0) {\n        setSyncing(true);\n\n        var pollSyncStatus = function pollSyncStatus() {\n          querySyncStatus(function (status) {\n            switch (status) {\n              case SyncNotStarted:\n                break;\n\n              case Syncing:\n                setSyncing(true);\n                break;\n\n              case SyncDone:\n                clearInterval(syncStatusPoller);\n                setLoading(false);\n                setSyncing(false);\n                break;\n            }\n          })[\"catch\"](function (err) {\n            console.error(err);\n          });\n        };\n\n        syncStatusPoller = setInterval(pollSyncStatus, 1000);\n      } else {\n        // no session found, so we can not sync any data\n        setLoading(false);\n        setSyncing(false);\n      }\n    })[\"catch\"](function (err) {\n      console.error(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"BBGO\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n      })]\n    }), /*#__PURE__*/_jsxs(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsx(CssBaseline, {}), loading ? syncing ? /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsxs(Dialog, {\n          open: syncing,\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsx(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Syncing Trades\"\n          }), /*#__PURE__*/_jsxs(DialogContent, {\n            children: [/*#__PURE__*/_jsx(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: \"The environment is syncing trades from the exchange sessions. Please wait a moment...\"\n            }), /*#__PURE__*/_jsx(Box, {\n              m: 2,\n              children: /*#__PURE__*/_jsx(LinearProgress, {})\n            })]\n          })]\n        })\n      }) : /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsxs(Dialog, {\n          open: loading,\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsx(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Loading\"\n          }), /*#__PURE__*/_jsxs(DialogContent, {\n            children: [/*#__PURE__*/_jsx(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: \"Loading...\"\n            }), /*#__PURE__*/_jsx(Box, {\n              m: 2,\n              children: /*#__PURE__*/_jsx(LinearProgress, {})\n            })]\n          })]\n        })\n      }) : /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}