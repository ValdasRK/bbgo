{"ast":null,"code":"import _slicedToArray from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport Alert from '@material-ui/lab/Alert';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Visibility from '@material-ui/icons/Visibility';\nimport { addSession, testSessionConnection } from '../api/bbgo';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      minWidth: 120\n    },\n    buttons: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      marginTop: theme.spacing(2),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n      '& > *': {\n        marginLeft: theme.spacing(1)\n      }\n    }\n  };\n});\nexport default function AddExchangeSessionForm(_ref) {\n  var onBack = _ref.onBack,\n      onAdded = _ref.onAdded;\n  var classes = useStyles();\n\n  var _React$useState = React.useState('max'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      exchangeType = _React$useState2[0],\n      setExchangeType = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      customSessionName = _React$useState4[0],\n      setCustomSessionName = _React$useState4[1];\n\n  var _React$useState5 = React.useState(exchangeType),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      sessionName = _React$useState6[0],\n      setSessionName = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      testing = _React$useState8[0],\n      setTesting = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      testResponse = _React$useState10[0],\n      setTestResponse = _React$useState10[1];\n\n  var _React$useState11 = React.useState(null),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      response = _React$useState12[0],\n      setResponse = _React$useState12[1];\n\n  var _React$useState13 = React.useState(''),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      apiKey = _React$useState14[0],\n      setApiKey = _React$useState14[1];\n\n  var _React$useState15 = React.useState(''),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      apiSecret = _React$useState16[0],\n      setApiSecret = _React$useState16[1];\n\n  var _React$useState17 = React.useState(false),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      showApiKey = _React$useState18[0],\n      setShowApiKey = _React$useState18[1];\n\n  var _React$useState19 = React.useState(false),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      showApiSecret = _React$useState20[0],\n      setShowApiSecret = _React$useState20[1];\n\n  var _React$useState21 = React.useState(false),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      isMargin = _React$useState22[0],\n      setIsMargin = _React$useState22[1];\n\n  var _React$useState23 = React.useState(false),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      isIsolatedMargin = _React$useState24[0],\n      setIsIsolatedMargin = _React$useState24[1];\n\n  var _React$useState25 = React.useState(\"\"),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      isolatedMarginSymbol = _React$useState26[0],\n      setIsolatedMarginSymbol = _React$useState26[1];\n\n  var resetTestResponse = function resetTestResponse() {\n    setTestResponse(null);\n  };\n\n  var handleExchangeTypeChange = function handleExchangeTypeChange(event) {\n    setExchangeType(event.target.value);\n    setSessionName(event.target.value);\n    resetTestResponse();\n  };\n\n  var createSessionConfig = function createSessionConfig() {\n    return {\n      name: sessionName,\n      exchange: exchangeType,\n      key: apiKey,\n      secret: apiSecret,\n      margin: isMargin,\n      envVarPrefix: exchangeType.toUpperCase(),\n      isolatedMargin: isIsolatedMargin,\n      isolatedMarginSymbol: isolatedMarginSymbol\n    };\n  };\n\n  var handleAdd = function handleAdd(event) {\n    var payload = createSessionConfig();\n    addSession(payload, function (response) {\n      setResponse(response);\n\n      if (onAdded) {\n        setTimeout(onAdded, 3000);\n      }\n    })[\"catch\"](function (error) {\n      console.error(error);\n      setResponse(error.response);\n    });\n  };\n\n  var handleTestConnection = function handleTestConnection(event) {\n    var payload = createSessionConfig();\n    setTesting(true);\n    testSessionConnection(payload, function (response) {\n      console.log(response);\n      setTesting(false);\n      setTestResponse(response);\n    })[\"catch\"](function (error) {\n      console.error(error);\n      setTesting(false);\n      setTestResponse(error.response);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Add Exchange Session\"\n    }), /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          className: classes.formControl,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"exchange-type-select-label\",\n            children: \"Exchange\"\n          }), /*#__PURE__*/_jsxs(Select, {\n            labelId: \"exchange-type-select-label\",\n            id: \"exchange-type-select\",\n            value: exchangeType,\n            onChange: handleExchangeTypeChange,\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              value: \"binance\",\n              children: \"Binance\"\n            }), /*#__PURE__*/_jsx(MenuItem, {\n              value: \"max\",\n              children: \"Max\"\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: /*#__PURE__*/_jsx(TextField, {\n          id: \"name\",\n          name: \"name\",\n          label: \"Session Name\",\n          fullWidth: true,\n          required: true,\n          disabled: !customSessionName,\n          onChange: function onChange(event) {\n            setSessionName(event.target.value);\n          },\n          value: sessionName\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        children: [/*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            color: \"secondary\",\n            name: \"custom_session_name\",\n            onChange: function onChange(event) {\n              setCustomSessionName(event.target.checked);\n            },\n            value: \"1\"\n          }),\n          label: \"Custom exchange session name\"\n        }), /*#__PURE__*/_jsxs(FormHelperText, {\n          id: \"session-name-helper-text\",\n          children: [\"By default, the session name will be the exchange type name, e.g. \", /*#__PURE__*/_jsx(\"code\", {\n            children: \"binance\"\n          }), \" or \", /*#__PURE__*/_jsx(\"code\", {\n            children: \"max\"\n          }), \".\", /*#__PURE__*/_jsx(\"br\", {}), \"If you're using multiple exchange sessions, you might need to custom the session name. \", /*#__PURE__*/_jsx(\"br\", {}), \"This is for advanced users.\"]\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          variant: \"filled\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            htmlFor: \"apiKey\",\n            children: \"API Key\"\n          }), /*#__PURE__*/_jsx(FilledInput, {\n            id: \"apiKey\",\n            type: showApiKey ? 'text' : 'password',\n            value: apiKey,\n            endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsx(IconButton, {\n                \"aria-label\": \"toggle key visibility\",\n                onClick: function onClick() {\n                  setShowApiKey(!showApiKey);\n                },\n                onMouseDown: function onMouseDown(event) {\n                  event.preventDefault();\n                },\n                edge: \"end\",\n                children: showApiKey ? /*#__PURE__*/_jsx(Visibility, {}) : /*#__PURE__*/_jsx(VisibilityOff, {})\n              })\n            }),\n            onChange: function onChange(event) {\n              setApiKey(event.target.value);\n              resetTestResponse();\n            }\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          fullWidth: true,\n          variant: \"filled\",\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            htmlFor: \"apiSecret\",\n            children: \"API Secret\"\n          }), /*#__PURE__*/_jsx(FilledInput, {\n            id: \"apiSecret\",\n            type: showApiSecret ? 'text' : 'password',\n            value: apiSecret,\n            endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsx(IconButton, {\n                \"aria-label\": \"toggle key visibility\",\n                onClick: function onClick() {\n                  setShowApiSecret(!showApiSecret);\n                },\n                onMouseDown: function onMouseDown(event) {\n                  event.preventDefault();\n                },\n                edge: \"end\",\n                children: showApiSecret ? /*#__PURE__*/_jsx(Visibility, {}) : /*#__PURE__*/_jsx(VisibilityOff, {})\n              })\n            }),\n            onChange: function onChange(event) {\n              setApiSecret(event.target.value);\n              resetTestResponse();\n            }\n          })]\n        })\n      }), exchangeType === \"binance\" ? /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            color: \"secondary\",\n            name: \"isMargin\",\n            onChange: function onChange(event) {\n              setIsMargin(event.target.checked);\n              resetTestResponse();\n            },\n            value: \"1\"\n          }),\n          label: \"Use margin trading.\"\n        }), /*#__PURE__*/_jsx(FormHelperText, {\n          id: \"isMargin-helper-text\",\n          children: \"This is only available for Binance. Please use the leverage at your own risk.\"\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Checkbox, {\n            color: \"secondary\",\n            name: \"isIsolatedMargin\",\n            onChange: function onChange(event) {\n              setIsIsolatedMargin(event.target.checked);\n              resetTestResponse();\n            },\n            value: \"1\"\n          }),\n          label: \"Use isolated margin trading.\"\n        }), /*#__PURE__*/_jsx(FormHelperText, {\n          id: \"isIsolatedMargin-helper-text\",\n          children: \"This is only available for Binance. If this is set, you can only trade one symbol with one session.\"\n        }), isIsolatedMargin ? /*#__PURE__*/_jsx(TextField, {\n          id: \"isolatedMarginSymbol\",\n          name: \"isolatedMarginSymbol\",\n          label: \"Isolated Margin Symbol\",\n          onChange: function onChange(event) {\n            setIsolatedMarginSymbol(event.target.value);\n            resetTestResponse();\n          },\n          fullWidth: true,\n          required: true\n        }) : null]\n      }) : null]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.buttons,\n      children: [/*#__PURE__*/_jsx(Button, {\n        onClick: function onClick() {\n          if (onBack) {\n            onBack();\n          }\n        },\n        children: \"Back\"\n      }), /*#__PURE__*/_jsx(Button, {\n        color: \"primary\",\n        onClick: handleTestConnection,\n        disabled: testing,\n        children: testing ? \"Testing\" : \"Test Connection\"\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleAdd,\n        children: \"Add\"\n      })]\n    }), testResponse ? testResponse.error ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        children: testResponse.error\n      })\n    }) : testResponse.success ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"success\",\n        children: \"Connection Test Succeeded\"\n      })\n    }) : null : null, response ? response.error ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        children: response.error\n      })\n    }) : response.success ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"success\",\n        children: \"Exchange Session Added\"\n      })\n    }) : null : null]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}