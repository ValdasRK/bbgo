{"ast":null,"code":"var _jsxFileName = \"/Users/austin/Desktop/bbgo/frontend/pages/_app.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from '../src/theme';\nimport '../styles/globals.css';\nimport { querySessions, querySyncStatus } from \"../api/bbgo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyncNotStarted = 0;\nconst Syncing = 1;\nconst SyncDone = 2; // session is configured, check if we're syncing data\n\nlet syncStatusPoller = null;\nexport default function MyApp(props) {\n  const {\n    Component,\n    pageProps\n  } = props;\n  const [loading, setLoading] = React.useState(true);\n  const [syncing, setSyncing] = React.useState(false);\n  React.useEffect(() => {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n\n    querySessions(sessions => {\n      if (sessions.length > 0) {\n        setSyncing(true);\n\n        const pollSyncStatus = () => {\n          querySyncStatus(status => {\n            switch (status) {\n              case SyncNotStarted:\n                break;\n\n              case Syncing:\n                setSyncing(true);\n                break;\n\n              case SyncDone:\n                clearInterval(syncStatusPoller);\n                setLoading(false);\n                setSyncing(false);\n                break;\n            }\n          }).catch(err => {\n            console.error(err);\n          });\n        };\n\n        syncStatusPoller = setInterval(pollSyncStatus, 1000);\n      } else {\n        // no session found, so we can not sync any data\n        setLoading(false);\n        setSyncing(false);\n      }\n    }).catch(err => {\n      console.error(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DAppProvider, {\n    config: config,\n    children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"BBGO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"viewport\",\n          content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), loading ? syncing ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Dialog, {\n            open: syncing,\n            \"aria-labelledby\": \"alert-dialog-title\",\n            \"aria-describedby\": \"alert-dialog-description\",\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              id: \"alert-dialog-title\",\n              children: \"Syncing Trades\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n                id: \"alert-dialog-description\",\n                children: \"The environment is syncing trades from the exchange sessions. Please wait a moment...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                m: 2,\n                children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Dialog, {\n            open: loading,\n            \"aria-labelledby\": \"alert-dialog-title\",\n            \"aria-describedby\": \"alert-dialog-description\",\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              id: \"alert-dialog-title\",\n              children: \"Loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n                id: \"alert-dialog-description\",\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                m: 2,\n                children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\nMyApp.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  pageProps: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["/Users/austin/Desktop/bbgo/frontend/pages/_app.tsx"],"names":["React","PropTypes","Head","ThemeProvider","Dialog","DialogContent","DialogContentText","DialogTitle","LinearProgress","Box","CssBaseline","theme","querySessions","querySyncStatus","SyncNotStarted","Syncing","SyncDone","syncStatusPoller","MyApp","props","Component","pageProps","loading","setLoading","useState","syncing","setSyncing","useEffect","jssStyles","document","querySelector","parentElement","removeChild","sessions","length","pollSyncStatus","status","clearInterval","catch","err","console","error","setInterval","config","propTypes","elementType","isRequired","object"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\n\nimport {ThemeProvider} from '@material-ui/core/styles';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from '../src/theme';\nimport '../styles/globals.css'\nimport {querySessions, querySyncStatus} from \"../api/bbgo\";\nimport {Sync} from \"@material-ui/icons\";\n\nconst SyncNotStarted = 0\nconst Syncing = 1\nconst SyncDone = 2\n\n// session is configured, check if we're syncing data\nlet syncStatusPoller = null\n\nexport default function MyApp(props) {\n    const {Component, pageProps} = props;\n\n    const [loading, setLoading] = React.useState(true)\n    const [syncing, setSyncing] = React.useState(false)\n\n    React.useEffect(() => {\n        // Remove the server-side injected CSS.\n        const jssStyles = document.querySelector('#jss-server-side');\n        if (jssStyles) {\n            jssStyles.parentElement.removeChild(jssStyles);\n        }\n\n        querySessions((sessions) => {\n            if (sessions.length > 0) {\n                setSyncing(true)\n\n                const pollSyncStatus = () => {\n                    querySyncStatus((status) => {\n                        switch (status) {\n                            case SyncNotStarted:\n                                break\n                            case Syncing:\n                                setSyncing(true);\n                                break;\n                            case SyncDone:\n                                clearInterval(syncStatusPoller);\n                                setLoading(false);\n                                setSyncing(false);\n                                break;\n                        }\n                    }).catch((err) => {\n                        console.error(err)\n                    })\n                }\n\n                syncStatusPoller = setInterval(pollSyncStatus, 1000)\n            } else {\n                // no session found, so we can not sync any data\n                setLoading(false)\n                setSyncing(false)\n            }\n        }).catch((err) => {\n            console.error(err)\n        })\n\n    }, []);\n\n    return (\n        <DAppProvider config={config}>\n            <React.Fragment>\n                <Head>\n                    <title>BBGO</title>\n                    <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\"/>\n                </Head>\n                <ThemeProvider theme={theme}>\n                    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n                    <CssBaseline/>\n                    {\n                        loading ? (syncing ? (\n                            <React.Fragment>\n                                <Dialog\n                                    open={syncing}\n                                    aria-labelledby=\"alert-dialog-title\"\n                                    aria-describedby=\"alert-dialog-description\"\n                                >\n                                    <DialogTitle id=\"alert-dialog-title\">{\"Syncing Trades\"}</DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText id=\"alert-dialog-description\">\n                                            The environment is syncing trades from the exchange sessions.\n                                            Please wait a moment...\n                                        </DialogContentText>\n                                        <Box m={2}>\n                                            <LinearProgress/>\n                                        </Box>\n                                    </DialogContent>\n                                </Dialog>\n                            </React.Fragment>\n                        ) : (\n                            <React.Fragment>\n                                <Dialog\n                                    open={loading}\n                                    aria-labelledby=\"alert-dialog-title\"\n                                    aria-describedby=\"alert-dialog-description\"\n                                >\n                                    <DialogTitle id=\"alert-dialog-title\">{\"Loading\"}</DialogTitle>\n                                    <DialogContent>\n                                        <DialogContentText id=\"alert-dialog-description\">\n                                            Loading...\n                                        </DialogContentText>\n                                        <Box m={2}>\n                                            <LinearProgress/>\n                                        </Box>\n                                    </DialogContent>\n                                </Dialog>\n                            </React.Fragment>\n                        )) : (\n                            <Component {...pageProps}/>\n                        )\n                    }\n                </ThemeProvider>\n            </React.Fragment>\n        </DAppProvider>\n    );\n}\n\nMyApp.propTypes = {\n    Component: PropTypes.elementType.isRequired,\n    pageProps: PropTypes.object.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}