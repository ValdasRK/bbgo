{"ast":null,"code":"import _slicedToArray from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { ResponsiveBar } from '@nivo/bar';\nimport { queryTradingVolume } from '../api/bbgo';\nimport { useEffect, useState } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction toPeriodDateString(time, period) {\n  switch (period) {\n    case \"day\":\n      return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate();\n\n    case \"month\":\n      return time.getFullYear() + \"-\" + (time.getMonth() + 1);\n\n    case \"year\":\n      return time.getFullYear();\n  }\n\n  return time.getFullYear() + \"-\" + (time.getMonth() + 1) + \"-\" + time.getDate();\n}\n\nfunction groupData(rows, period, segment) {\n  var dateIndex = {};\n  var startTime = null;\n  var endTime = null;\n  var keys = {};\n  rows.forEach(function (v) {\n    var time = new Date(v.time);\n\n    if (!startTime) {\n      startTime = time;\n    }\n\n    endTime = time;\n    var dateStr = toPeriodDateString(time, period);\n    var key = v[segment];\n    keys[key] = true;\n    var k = key ? key : \"total\";\n    var quoteVolume = Math.round(v.quoteVolume * 100) / 100;\n\n    if (dateIndex[dateStr]) {\n      dateIndex[dateStr][k] = quoteVolume;\n    } else {\n      dateIndex[dateStr] = _defineProperty({\n        date: dateStr,\n        year: time.getFullYear(),\n        month: time.getMonth() + 1,\n        day: time.getDate()\n      }, k, quoteVolume);\n    }\n  });\n  var data = [];\n\n  while (startTime < endTime) {\n    var dateStr = toPeriodDateString(startTime, period);\n    var _groupData = dateIndex[dateStr];\n\n    if (_groupData) {\n      data.push(_groupData);\n    } else {\n      data.push({\n        date: dateStr,\n        year: startTime.getFullYear(),\n        month: startTime.getMonth() + 1,\n        day: startTime.getDate(),\n        total: 0\n      });\n    }\n\n    switch (period) {\n      case \"day\":\n        startTime.setDate(startTime.getDate() + 1);\n        break;\n\n      case \"month\":\n        startTime.setMonth(startTime.getMonth() + 1);\n        break;\n\n      case \"year\":\n        startTime.setFullYear(startTime.getFullYear() + 1);\n        break;\n    }\n  }\n\n  return [data, Object.keys(keys)];\n}\n\nexport default function TradingVolumeBar(props) {\n  var _useState = useState([]),\n      tradingVolumes = _useState[0],\n      setTradingVolumes = _useState[1];\n\n  var _useState2 = useState(props.period),\n      period = _useState2[0],\n      setPeriod = _useState2[1];\n\n  var _useState3 = useState(props.segment),\n      segment = _useState3[0],\n      setSegment = _useState3[1];\n\n  useEffect(function () {\n    if (props.period !== period) {\n      setPeriod(props.period);\n    }\n\n    if (props.segment !== segment) {\n      setSegment(props.segment);\n    }\n\n    queryTradingVolume({\n      period: props.period,\n      segment: props.segment\n    }, function (tradingVolumes) {\n      setTradingVolumes(tradingVolumes);\n    });\n  }, [props.period, props.segment]);\n\n  var _groupData2 = groupData(tradingVolumes, period, segment),\n      _groupData3 = _slicedToArray(_groupData2, 2),\n      data = _groupData3[0],\n      keys = _groupData3[1];\n\n  return /*#__PURE__*/_jsx(ResponsiveBar, {\n    keys: keys,\n    data: data,\n    indexBy: \"date\",\n    margin: {\n      top: 50,\n      right: 160,\n      bottom: 100,\n      left: 60\n    },\n    padding: 0.3,\n    valueScale: {\n      type: 'linear'\n    },\n    indexScale: {\n      type: 'band',\n      round: true\n    },\n    labelSkipWidth: 30,\n    labelSkipHeight: 20,\n    enableGridY: true,\n    colors: {\n      scheme: 'paired'\n    },\n    axisBottom: {\n      tickRotation: -90,\n      legend: period,\n      legendPosition: 'middle',\n      legendOffset: 80\n    },\n    legends: [{\n      dataFrom: 'keys',\n      anchor: 'right',\n      direction: 'column',\n      justify: false,\n      translateX: 120,\n      translateY: 0,\n      itemsSpacing: 2,\n      itemWidth: 100,\n      itemHeight: 20,\n      itemDirection: 'left-to-right',\n      itemOpacity: 0.85,\n      symbolSize: 20,\n      effects: [{\n        on: 'hover',\n        style: {\n          itemOpacity: 1\n        }\n      }]\n    }],\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15\n  });\n}","map":null,"metadata":{},"sourceType":"module"}