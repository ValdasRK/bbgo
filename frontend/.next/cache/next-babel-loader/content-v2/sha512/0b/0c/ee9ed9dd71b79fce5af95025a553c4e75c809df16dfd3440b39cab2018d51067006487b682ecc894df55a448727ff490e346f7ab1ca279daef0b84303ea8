{"ast":null,"code":"const _excluded = [\"inputRef\", \"onChange\"],\n      _excluded2 = [\"inputRef\", \"onChange\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { attachStrategyOn, querySessions, querySessionSymbols } from \"../api/bbgo\";\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Alert from '@material-ui/lab/Alert';\nimport Box from \"@material-ui/core/Box\";\nimport NumberFormat from 'react-number-format';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction parseFloatValid(s) {\n  if (s) {\n    const f = parseFloat(s);\n\n    if (!isNaN(f)) {\n      return f;\n    }\n  }\n\n  return null;\n}\n\nfunction parseFloatCall(s, cb) {\n  if (s) {\n    const f = parseFloat(s);\n\n    if (!isNaN(f)) {\n      cb(f);\n    }\n  }\n}\n\nfunction StandardNumberFormat(props) {\n  const {\n    inputRef,\n    onChange\n  } = props,\n        other = _objectWithoutProperties(props, _excluded);\n\n  return /*#__PURE__*/_jsx(NumberFormat, _objectSpread(_objectSpread({}, other), {}, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true\n  }));\n}\n\nfunction PriceNumberFormat(props) {\n  const {\n    inputRef,\n    onChange\n  } = props,\n        other = _objectWithoutProperties(props, _excluded2);\n\n  return /*#__PURE__*/_jsx(NumberFormat, _objectSpread(_objectSpread({}, other), {}, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: props.name,\n          value: values.value\n        }\n      });\n    },\n    thousandSeparator: true,\n    isNumericString: true,\n    prefix: \"$\"\n  }));\n}\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    minWidth: 120\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    marginTop: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n    '& > *': {\n      marginLeft: theme.spacing(1)\n    }\n  }\n}));\nexport default function ConfigureGridStrategyForm({\n  onBack,\n  onAdded\n}) {\n  const classes = useStyles();\n  const [errors, setErrors] = React.useState({});\n  const [sessions, setSessions] = React.useState([]);\n  const [activeSessionSymbols, setActiveSessionSymbols] = React.useState([]);\n  const [selectedSessionName, setSelectedSessionName] = React.useState(null);\n  const [selectedSymbol, setSelectedSymbol] = React.useState('');\n  const [quantityBy, setQuantityBy] = React.useState('fixedAmount');\n  const [upperPrice, setUpperPrice] = React.useState(30000.0);\n  const [lowerPrice, setLowerPrice] = React.useState(10000.0);\n  const [fixedAmount, setFixedAmount] = React.useState(100.0);\n  const [fixedQuantity, setFixedQuantity] = React.useState(1.234);\n  const [gridNumber, setGridNumber] = React.useState(20);\n  const [profitSpread, setProfitSpread] = React.useState(100.0);\n  const [response, setResponse] = React.useState({});\n  React.useEffect(() => {\n    querySessions(sessions => {\n      setSessions(sessions);\n    });\n  }, []);\n\n  const handleAdd = event => {\n    const payload = {\n      symbol: selectedSymbol,\n      gridNumber: parseFloatValid(gridNumber),\n      profitSpread: parseFloatValid(profitSpread),\n      upperPrice: parseFloatValid(upperPrice),\n      lowerPrice: parseFloatValid(lowerPrice)\n    };\n\n    switch (quantityBy) {\n      case \"fixedQuantity\":\n        payload.quantity = parseFloatValid(fixedQuantity);\n        break;\n\n      case \"fixedAmount\":\n        payload.amount = parseFloatValid(fixedAmount);\n        break;\n    }\n\n    if (!selectedSessionName) {\n      setErrors({\n        session: true\n      });\n      return;\n    }\n\n    if (!selectedSymbol) {\n      setErrors({\n        symbol: true\n      });\n      return;\n    }\n\n    console.log(payload);\n    attachStrategyOn(selectedSessionName, \"grid\", payload, response => {\n      console.log(response);\n      setResponse(response);\n\n      if (onAdded) {\n        setTimeout(onAdded, 3000);\n      }\n    }).catch(err => {\n      console.error(err);\n      setResponse(err.response.data);\n    }).finally(() => {\n      setErrors({});\n    });\n  };\n\n  const handleQuantityBy = event => {\n    setQuantityBy(event.target.value);\n  };\n\n  const handleSessionChange = event => {\n    const sessionName = event.target.value;\n    setSelectedSessionName(sessionName);\n    querySessionSymbols(sessionName, symbols => {\n      setActiveSessionSymbols(symbols);\n    }).catch(err => {\n      console.error(err);\n      setResponse(err.response.data);\n    });\n  };\n\n  const sessionMenuItems = sessions.map((session, index) => {\n    return /*#__PURE__*/_jsx(MenuItem, {\n      value: session.name,\n      children: session.name\n    }, session.name);\n  });\n  const symbolMenuItems = activeSessionSymbols.map((symbol, index) => {\n    return /*#__PURE__*/_jsx(MenuItem, {\n      value: symbol,\n      children: symbol\n    }, symbol);\n  });\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Add Grid Strategy\"\n    }), /*#__PURE__*/_jsx(Typography, {\n      variant: \"body1\",\n      gutterBottom: true,\n      children: \"Fixed price band grid strategy uses the fixed price band to place buy/sell orders. This strategy places sell orders above the current price, places buy orders below the current price. If any of the order is executed, then it will automatically place a new profit order on the reverse side.\"\n    }), /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxs(FormControl, {\n          required: true,\n          className: classes.formControl,\n          error: errors.session,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"session-select-label\",\n            children: \"Session\"\n          }), /*#__PURE__*/_jsx(Select, {\n            labelId: \"session-select-label\",\n            id: \"session-select\",\n            value: selectedSessionName ? selectedSessionName : '',\n            onChange: handleSessionChange,\n            children: sessionMenuItems\n          })]\n        }), /*#__PURE__*/_jsx(FormHelperText, {\n          id: \"session-select-helper-text\",\n          children: \"Select the exchange session you want to mount this strategy.\"\n        })]\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxs(FormControl, {\n          required: true,\n          className: classes.formControl,\n          error: errors.symbol,\n          children: [/*#__PURE__*/_jsx(InputLabel, {\n            id: \"symbol-select-label\",\n            children: \"Market\"\n          }), /*#__PURE__*/_jsx(Select, {\n            labelId: \"symbol-select-label\",\n            id: \"symbol-select\",\n            value: selectedSymbol ? selectedSymbol : '',\n            onChange: event => {\n              setSelectedSymbol(event.target.value);\n            },\n            children: symbolMenuItems\n          })]\n        }), /*#__PURE__*/_jsx(FormHelperText, {\n          id: \"session-select-helper-text\",\n          children: \"Select the market you want to run this strategy\"\n        })]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextField, {\n          id: \"upperPrice\",\n          name: \"upper_price\",\n          label: \"Upper Price\",\n          fullWidth: true,\n          required: true,\n          onChange: event => {\n            parseFloatCall(event.target.value, setUpperPrice);\n          },\n          value: upperPrice,\n          InputProps: {\n            inputComponent: PriceNumberFormat\n          }\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextField, {\n          id: \"lowerPrice\",\n          name: \"lower_price\",\n          label: \"Lower Price\",\n          fullWidth: true,\n          required: true,\n          onChange: event => {\n            parseFloatCall(event.target.value, setLowerPrice);\n          },\n          value: lowerPrice,\n          InputProps: {\n            inputComponent: PriceNumberFormat\n          }\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextField, {\n          id: \"profitSpread\",\n          name: \"profit_spread\",\n          label: \"Profit Spread\",\n          fullWidth: true,\n          required: true,\n          onChange: event => {\n            parseFloatCall(event.target.value, setProfitSpread);\n          },\n          value: profitSpread,\n          InputProps: {\n            inputComponent: StandardNumberFormat\n          }\n        })\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 3,\n        children: /*#__PURE__*/_jsxs(FormControl, {\n          component: \"fieldset\",\n          children: [/*#__PURE__*/_jsx(FormLabel, {\n            component: \"legend\",\n            children: \"Order Quantity By\"\n          }), /*#__PURE__*/_jsxs(RadioGroup, {\n            name: \"quantityBy\",\n            value: quantityBy,\n            onChange: handleQuantityBy,\n            children: [/*#__PURE__*/_jsx(FormControlLabel, {\n              value: \"fixedAmount\",\n              control: /*#__PURE__*/_jsx(Radio, {}),\n              label: \"Fixed Amount\"\n            }), /*#__PURE__*/_jsx(FormControlLabel, {\n              value: \"fixedQuantity\",\n              control: /*#__PURE__*/_jsx(Radio, {}),\n              label: \"Fixed Quantity\"\n            })]\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        sm: 9,\n        children: [quantityBy === \"fixedQuantity\" ? /*#__PURE__*/_jsx(TextField, {\n          id: \"fixedQuantity\",\n          name: \"order_quantity\",\n          label: \"Fixed Quantity\",\n          fullWidth: true,\n          required: true,\n          onChange: event => {\n            parseFloatCall(event.target.value, setFixedQuantity);\n          },\n          value: fixedQuantity,\n          InputProps: {\n            inputComponent: StandardNumberFormat\n          }\n        }) : null, quantityBy === \"fixedAmount\" ? /*#__PURE__*/_jsx(TextField, {\n          id: \"orderAmount\",\n          name: \"order_amount\",\n          label: \"Fixed Amount\",\n          fullWidth: true,\n          required: true,\n          onChange: event => {\n            parseFloatCall(event.target.value, setFixedAmount);\n          },\n          value: fixedAmount,\n          InputProps: {\n            inputComponent: PriceNumberFormat\n          }\n        }) : null]\n      }), /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(TextField, {\n          id: \"gridNumber\",\n          name: \"grid_number\",\n          label: \"Number of Grid\",\n          fullWidth: true,\n          required: true,\n          onChange: event => {\n            parseFloatCall(event.target.value, setGridNumber);\n          },\n          value: gridNumber,\n          InputProps: {\n            inputComponent: StandardNumberFormat\n          }\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.buttons,\n      children: [/*#__PURE__*/_jsx(Button, {\n        onClick: () => {\n          if (onBack) {\n            onBack();\n          }\n        },\n        children: \"Back\"\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleAdd,\n        children: \"Add Strategy\"\n      })]\n    }), response ? response.error ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        children: response.error\n      })\n    }) : response.success ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"success\",\n        children: \"Strategy Added\"\n      })\n    }) : null : null]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}