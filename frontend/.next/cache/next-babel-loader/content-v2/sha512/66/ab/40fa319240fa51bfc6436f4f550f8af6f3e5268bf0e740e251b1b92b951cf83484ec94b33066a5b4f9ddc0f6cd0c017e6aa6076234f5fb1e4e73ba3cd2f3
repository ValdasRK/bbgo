{"ast":null,"code":"import _slicedToArray from \"/Users/austin/Desktop/bbgo/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Alert from '@material-ui/lab/Alert';\nimport { configureDatabase, testDatabaseConnection } from '../api/bbgo';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    formControl: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      minWidth: 120\n    },\n    buttons: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      marginTop: theme.spacing(2),\n      paddingTop: theme.spacing(2),\n      paddingBottom: theme.spacing(2),\n      '& > *': {\n        marginLeft: theme.spacing(1)\n      }\n    }\n  };\n});\nexport default function ConfigureDatabaseForm(_ref) {\n  var onConfigured = _ref.onConfigured;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(\"root@tcp(127.0.0.1:3306)/bbgo\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mysqlURL = _React$useState2[0],\n      setMysqlURL = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"sqlite3\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      driver = _React$useState4[0],\n      setDriver = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      testing = _React$useState6[0],\n      setTesting = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      testResponse = _React$useState8[0],\n      setTestResponse = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      configured = _React$useState10[0],\n      setConfigured = _React$useState10[1];\n\n  var getDSN = function getDSN() {\n    return driver === \"sqlite3\" ? \"file:bbgo.sqlite3\" : mysqlURL;\n  };\n\n  var resetTestResponse = function resetTestResponse() {\n    setTestResponse(null);\n  };\n\n  var handleConfigureDatabase = function handleConfigureDatabase(event) {\n    var dsn = getDSN();\n    configureDatabase({\n      driver: driver,\n      dsn: dsn\n    }, function (response) {\n      console.log(response);\n      setTesting(false);\n      setTestResponse(response);\n\n      if (onConfigured) {\n        setConfigured(true);\n        setTimeout(onConfigured, 3000);\n      }\n    })[\"catch\"](function (err) {\n      console.error(err);\n      setTesting(false);\n      setTestResponse(err.response.data);\n    });\n  };\n\n  var handleTestConnection = function handleTestConnection(event) {\n    var dsn = getDSN();\n    setTesting(true);\n    testDatabaseConnection({\n      driver: driver,\n      dsn: dsn\n    }, function (response) {\n      console.log(response);\n      setTesting(false);\n      setTestResponse(response);\n    })[\"catch\"](function (err) {\n      console.error(err);\n      setTesting(false);\n      setTestResponse(err.response.data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Configure Database\"\n    }), /*#__PURE__*/_jsx(Typography, {\n      variant: \"body1\",\n      gutterBottom: true,\n      children: \"If you have database installed on your machine, you can enter the DSN string in the following field. Please note this is optional, you CAN SKIP this step.\"\n    }), /*#__PURE__*/_jsxs(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 4,\n        children: /*#__PURE__*/_jsxs(Box, {\n          m: 6,\n          children: [/*#__PURE__*/_jsxs(FormControl, {\n            component: \"fieldset\",\n            required: true,\n            children: [/*#__PURE__*/_jsx(FormLabel, {\n              component: \"legend\",\n              children: \"Database Driver\"\n            }), /*#__PURE__*/_jsxs(RadioGroup, {\n              \"aria-label\": \"driver\",\n              name: \"driver\",\n              value: driver,\n              onChange: function onChange(event) {\n                setDriver(event.target.value);\n              },\n              children: [/*#__PURE__*/_jsx(FormControlLabel, {\n                value: \"sqlite3\",\n                control: /*#__PURE__*/_jsx(Radio, {}),\n                label: \"Standard (Default)\"\n              }), /*#__PURE__*/_jsx(FormControlLabel, {\n                value: \"mysql\",\n                control: /*#__PURE__*/_jsx(Radio, {}),\n                label: \"MySQL\"\n              })]\n            })]\n          }), /*#__PURE__*/_jsx(FormHelperText, {})]\n        })\n      }), driver === \"mysql\" ? /*#__PURE__*/_jsxs(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        children: [/*#__PURE__*/_jsx(TextField, {\n          id: \"mysql_url\",\n          name: \"mysql_url\",\n          label: \"MySQL Data Source Name\",\n          fullWidth: true,\n          required: true,\n          defaultValue: mysqlURL,\n          onChange: function onChange(event) {\n            setMysqlURL(event.target.value);\n            resetTestResponse();\n          }\n        }), /*#__PURE__*/_jsx(FormHelperText, {\n          children: \"MySQL DSN\"\n        }), /*#__PURE__*/_jsxs(Typography, {\n          variant: \"body1\",\n          gutterBottom: true,\n          children: [\"If you have database installed on your machine, you can enter the DSN string like the following format:\", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"pre\", {\n            children: /*#__PURE__*/_jsx(\"code\", {\n              children: \"root:password@tcp(127.0.0.1:3306)/bbgo\"\n            })\n          }), /*#__PURE__*/_jsx(\"br\", {}), \"Be sure to create your database before using it. You need to execute the following statement to create a database:\", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"pre\", {\n            children: /*#__PURE__*/_jsx(\"code\", {\n              children: \"CREATE DATABASE bbgo CHARSET utf8;\"\n            })\n          })]\n        })]\n      }) : /*#__PURE__*/_jsx(Grid, {\n        item: true,\n        xs: 12,\n        sm: 8,\n        children: /*#__PURE__*/_jsx(Box, {\n          m: 6,\n          children: /*#__PURE__*/_jsxs(Typography, {\n            variant: \"body1\",\n            gutterBottom: true,\n            children: [\"If you don't know what to choose, just pick the standard driver (sqlite3).\", /*#__PURE__*/_jsx(\"br\", {}), \"For professionals, you can pick MySQL driver, BBGO works best with MySQL, especially for larger data scale.\"]\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: classes.buttons,\n      children: [/*#__PURE__*/_jsx(Button, {\n        color: \"primary\",\n        onClick: handleTestConnection,\n        disabled: testing || configured,\n        children: testing ? \"Testing\" : \"Test Connection\"\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: testing || configured,\n        onClick: handleConfigureDatabase,\n        children: \"Configure\"\n      })]\n    }), testResponse ? testResponse.error ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        children: testResponse.error\n      })\n    }) : testResponse.success ? /*#__PURE__*/_jsx(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"success\",\n        children: \"Connection Test Succeeded\"\n      })\n    }) : null : null]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}