{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from '../src/theme';\nimport '../styles/globals.css';\nimport { querySessions, querySyncStatus } from \"../api/bbgo\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst SyncNotStarted = 0;\nconst Syncing = 1;\nconst SyncDone = 2; // session is configured, check if we're syncing data\n\nlet syncStatusPoller = null;\nexport default function MyApp(props) {\n  const {\n    Component,\n    pageProps\n  } = props;\n  const [loading, setLoading] = React.useState(true);\n  const [syncing, setSyncing] = React.useState(false);\n  React.useEffect(() => {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n\n    querySessions(sessions => {\n      if (sessions.length > 0) {\n        setSyncing(true);\n\n        const pollSyncStatus = () => {\n          querySyncStatus(status => {\n            switch (status) {\n              case SyncNotStarted:\n                break;\n\n              case Syncing:\n                setSyncing(true);\n                break;\n\n              case SyncDone:\n                clearInterval(syncStatusPoller);\n                setLoading(false);\n                setSyncing(false);\n                break;\n            }\n          }).catch(err => {\n            console.error(err);\n          });\n        };\n\n        syncStatusPoller = setInterval(pollSyncStatus, 1000);\n      } else {\n        // no session found, so we can not sync any data\n        setLoading(false);\n        setSyncing(false);\n      }\n    }).catch(err => {\n      console.error(err);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: \"BBGO\"\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"viewport\",\n        content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n      })]\n    }), /*#__PURE__*/_jsxs(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsx(CssBaseline, {}), loading ? syncing ? /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsxs(Dialog, {\n          open: syncing,\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsx(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Syncing Trades\"\n          }), /*#__PURE__*/_jsxs(DialogContent, {\n            children: [/*#__PURE__*/_jsx(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: \"The environment is syncing trades from the exchange sessions. Please wait a moment...\"\n            }), /*#__PURE__*/_jsx(Box, {\n              m: 2,\n              children: /*#__PURE__*/_jsx(LinearProgress, {})\n            })]\n          })]\n        })\n      }) : /*#__PURE__*/_jsx(React.Fragment, {\n        children: /*#__PURE__*/_jsxs(Dialog, {\n          open: loading,\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsx(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Loading\"\n          }), /*#__PURE__*/_jsxs(DialogContent, {\n            children: [/*#__PURE__*/_jsx(DialogContentText, {\n              id: \"alert-dialog-description\",\n              children: \"Loading...\"\n            }), /*#__PURE__*/_jsx(Box, {\n              m: 2,\n              children: /*#__PURE__*/_jsx(LinearProgress, {})\n            })]\n          })]\n        })\n      }) : /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}